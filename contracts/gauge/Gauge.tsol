pragma ever-solidity ^0.62.0;


import "./base/gauge/GaugeBase.tsol";
import "../libraries/Errors.tsol";
import "../libraries/Callback.tsol";


contract Gauge is GaugeBase {
    constructor(address _owner, address _voteEscrow) public onlyFactory {
        owner = _owner;
        voteEscrow = _voteEscrow;
    }

    function upgrade(TvmCell new_code, uint32 new_version, Callback.CallMeta meta) external override onlyFactory {
        if (new_version == gauge_version) {
            tvm.rawReserve(_reserve(), 0);
            meta.send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
            return;
        }

        // should be unpacked in the same order!
        TvmCell data = abi.encode(
            new_version, // 32
            meta, // 267
            withdrawAllLockPeriod,
            lastRewardTime,
            lastExtraRewardRoundIdx,
            lastQubeRewardRoundIdx,
            lastAverageUpdateTime,
            lockBoostedSupply,
            lockBoostedSupplyAverage,
            lockBoostedSupplyAveragePeriod,
            supplyAverage,
            supplyAveragePeriod,
            totalBoostedSupply,
            owner,
            voteEscrow,
            maxBoost,
            maxLockTime,
            init_mask,
            initialized,
            depositTokenData,
            qubeTokenData,
            qubeRewardRounds,
            qubeVestingPeriod,
            qubeVestingRatio,
            extraTokenData,
            extraRewardRounds,
            extraVestingPeriods,
            extraVestingRatios,
            extraRewardEnded,
            deposit_nonce,
            deposits,
            platformCode,
            gaugeAccountCode,
            factory,
            deploy_nonce,
            gauge_account_version,
            gauge_version
        );

        // set code after complete this method
        tvm.setcode(new_code);
        // run onCodeUpgrade from new code
        tvm.setCurrentCode(new_code);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell upgrade_data) private {}
}
