pragma ever-solidity ^0.62.0;


import "./GaugeFactoryStorage.tsol";
import "../../../libraries/Errors.tsol";
import "../../../libraries/Gas.tsol";
import "../../../libraries/Callback.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";


abstract contract GaugeFactoryUpgradable is GaugeFactoryStorage {
    modifier onlyOwner() {
        require(msg.sender == owner, Errors.NOT_OWNER);
        _;
    }

    function _reserve() internal pure returns (uint128) {
        return math.max(address(this).balance - msg.value, CONTRACT_MIN_BALANCE);
    }

    function installNewGaugeCode(TvmCell gauge_code, Callback.CallMeta meta) external onlyOwner {
        require (msg.value >= Gas.MIN_MSG_VALUE, Errors.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        GaugeCode = gauge_code;
        gauge_version++;
        emit GaugeCodeUpdate(meta.call_id, gauge_version - 1, gauge_version);
        meta.send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function installNewGaugeAccountCode(TvmCell gauge_account_code, Callback.CallMeta meta) external onlyOwner {
        require (msg.value >= Gas.MIN_MSG_VALUE, Errors.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        GaugeAccountCode = gauge_account_code;
        gauge_account_version++;
        emit GaugeAccountCodeUpdate(meta.call_id, gauge_account_version - 1, gauge_account_version);
        meta.send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function upgradeGauges(address[] gauges, Callback.CallMeta meta) external view onlyOwner {
        require (msg.value >= Gas.MIN_MSG_VALUE + Gas.GAUGE_UPGRADE_VALUE * gauges.length, Errors.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        for (uint i = 0; i < gauges.length; i++) {
            IGauge(gauges[i]).upgrade{value: Gas.GAUGE_UPGRADE_VALUE, flag: MsgFlag.SENDER_PAYS_FEES}(
                GaugeCode, gauge_version, meta
            );
        }
        meta.send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function updateGaugeAccountsCode(address[] gauges, Callback.CallMeta meta) external view onlyOwner {
        require (msg.value >= Gas.MIN_MSG_VALUE + Gas.GAUGE_UPGRADE_VALUE * gauges.length, Errors.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        for (uint i = 0; i < gauges.length; i++) {
            IGauge(gauges[i]).updateGaugeAccountCode{value: Gas.GAUGE_UPGRADE_VALUE, flag: MsgFlag.SENDER_PAYS_FEES}(
                GaugeAccountCode, gauge_account_version, meta
            );
        }
        meta.send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function forceUpgradeGaugeAccounts(address gauge, address[] users, Callback.CallMeta meta) external view onlyOwner {
        require (msg.value >= Gas.MIN_MSG_VALUE + Gas.GAUGE_ACCOUNT_UPGRADE_VALUE * users.length, Errors.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        for (uint i = 0; i < users.length; i++) {
            IGauge(gauge).forceUpgradeGaugeAccount{value: Gas.GAUGE_ACCOUNT_UPGRADE_VALUE, flag: MsgFlag.SENDER_PAYS_FEES}(
                users[i], meta
            );
        }

        meta.send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function processUpgradeGaugeRequest(Callback.CallMeta meta) external view override {
        require (msg.value >= Gas.GAUGE_UPGRADE_VALUE, Errors.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        IGauge(msg.sender).upgrade{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(GaugeCode, gauge_version, meta);
    }

    function processUpdateGaugeAccountCodeRequest(Callback.CallMeta meta) external view override {
        require (msg.value >= Gas.GAUGE_UPGRADE_VALUE, Errors.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        IGauge(msg.sender).updateGaugeAccountCode{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            GaugeAccountCode, gauge_account_version, meta
        );
    }
}